22. Create Database DYPIT using MongoDB
Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
Students(Sname,roll_no,class)

db.createCollection('teachers');

db.createCollection('students');

db.teachers.insertOne({ 'tname': 'Rahul', 
'dno': 12, 'dname': '', 
'experience': 5, 'salary':76000,
'date_of_joining': ISODate("2017-11-10T06:31:15.000Z") });

db.teachers.insertMany([
 { 'tname': 'patil', 'dno': 1, 'dname': 'COMP', 'experience': 5, 'salary': 500, 'date_of_joining': ISODate("2017-10-12T06:31:15.000Z") },
 { 'tname': 'jadhav', 'dno': 1, 'dname': 'COMP', 'experience': 4, 'salary': 300, 'date_of_joining': ISODate("2018-11-21T06:31:15.000Z") },
 { 'tname': 'chobe', 'dno': 1, 'dname': 'COMP', 'experience': 2, 'salary': 300, 'date_of_joining': ISODate("2020-10-02T06:31:15.000Z") },
 { 'tname': 'sakunde', 'dno': 2, 'dname': 'ENTC', 'experience': 6, 'salary': 900, 'date_of_joining': ISODate("2016-12-22T06:31:15.000Z") },
 { 'tname': 'bhosle', 'dno': 2, 'dname': 'ENTC', 'experience': 2, 'salary': 100, 'date_of_joining': ISODate("2020-09-17T06:31:15.000Z") },
 { 'tname': 'reddy', 'dno': 2, 'dname': 'ENTC', 'experience': 1, 'salary': 90, 'date_of_joining': ISODate("2021-06-13T06:31:15.000Z") },
 { 'tname': 'patel', 'dno': 3, 'dname': 'IT', 'experience': 9, 'salary': 100, 'date_of_joining': ISODate("2013-03-23T06:31:15.000Z") },
 { 'tname': 'desle', 'dno': 3, 'dname': 'IT', 'experience': 7, 'salary': 50, 'date_of_joining': ISODate("2015-03-14T06:31:15.000Z") },
 { 'tname': 'chavan', 'dno': 3, 'dname': 'IT', 'experience': 3, 'salary': 30, 'date_of_joining': ISODate("2019-11-10T06:31:15.000Z") }
] );



db.teachers.find().pretty();


db.students.insertMany([{
   'sname': 'krishna',
    'roll_no': 71 ,
   'class': 'TCOD' ,

 },
{
     'sname': 'jayesh',
     'roll_no': 77 ,
     'class': 'TCOD' 
 },
 {
     'sname': 'rupesh',
     'roll_no': 32 ,
     'class': 'TCOD' 

 },
 {
     'sname': 'akash',
     'roll_no': 73 ,
     'class': 'TCOD' 
},
 {
    'sname': 'dinesh',
    'roll_no': 79 ,
     'class': 'TCOC' 
 }
]);



1. Display the department wise average salary
db.teachers.aggregate([
 { $match : {dname : {$in : ['IT', 'COMP', 'ENTC']}} },
 { $group : {_id :'$dname', AverageSalary : {$avg : '$salary'} } }
]);



2. display the no. Of employees working in each department

db.teachers.aggregate([ 
{ $match: { dname: { $in: ['IT', 'COMP', 'ENTC'] } } }, 
{ $group: { _id: '$dname', deptCount:{ $sum: 1} } }
]);


3. Display the department wise total salary of departments having total salary greater than
or equals to 50000/-

db.teachers.aggregate([ 
{ $match: { dname: { $in: ['IT', 'COMP', 'ENTC'] }, salary : {$gte : 50000 } }}, 
{ $group: { _id: '$dname', totalSalary:{ $sum: '$salary'} } }
]);



4. Write the queries using the different operators like max, min. Etc.

db.teachers.aggregate([ 
{$group : {_id : 'dname' , minsalary : {$min : '$salary'}, maxSalary : {$max : '$salary'}}}
]);



5. Create unique index on any field for above given collections

db.teachers.createIndex( { 'index': 1 }, {expireAfterSeconds: 3600 });
db.teachers.createIndex( { 'ind': 3 });


6. Create compound index on any fields for above given collections
db.teachers.createIndex( { 'krishna': 1, 'shriman': 1 });


7. Show all the indexes created in the database DYPIT

db.getCollectionNames().forEach(function(collection) {
    indexes = db.getCollection(collection).getIndexes();
    print("Indexes on " + collection + ":");
    printjson(indexes);
});

8. Show all the indexes created in above collections.

db.teachers.getIndexes();
db.teachers.dropIndexes();






